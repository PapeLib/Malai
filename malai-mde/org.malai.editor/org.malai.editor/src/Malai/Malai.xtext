// automatically generated by Xtext
grammar org.Malai with org.eclipse.xtext.common.Terminals

import "http://org.malai.interactiveSystem/1_0_0//org/malai/interactiveSystem" 
import "http://org.malai.instrument/1_0_0//org/malai/instrument" as instrument
import "http://org.malai.interaction/1_0_0//org/malai/interaction" as interaction
import "http://org.malai.action/1_0_0//org/malai/action" as action
import "http://org.malai.event/1_0_0//org/malai/event" as event
import "http://org.malai.widget/1_0_0//org/malai/widget" as widget
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

interactiveSystem returns interactiveSystem:
	{interactiveSystem}
	'interactiveSystem'
	'{'
		('instruments' '{' instruments+=Instrument ( "," instruments+=Instrument)* '}' )?
		('interactions' '{' interactions+=Interaction ( "," interactions+=Interaction)* '}' )?
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
		('events' '{' events+=Event ( "," events+=Event)* '}' )?
		('widgets' '{' widgets+=Widget ( "," widgets+=Widget)* '}' )?
		('mapping' '{'(mapping+=LinkWidgetMapping)* '}')?
	'}';

LinkWidgetMapping returns LinkWidgetMapping:
	{LinkWidgetMapping}
	link=[instrument::Link|EString] ':'
	binds+=TransitionWidgetBinding (',' binds+=TransitionWidgetBinding)*
;

TransitionWidgetBinding returns TransitionWidgetBinding:
	{TransitionWidgetBinding}
	transition=[interaction::Transition|EString] '[' widgetIDs+=EString (',' widgetIDs+=EString)* ']'
;


Widget returns widget::Widget:
	Tree | Slider | ProgressBar | Table | Label | TextArea | TextField | Spinner | MultiLineList | SingleLineList | Panel | Window_Impl | DialogueBox | SplitPane | TabbedPanel | Button_Impl | ToggleButton | Menu_Impl | CheckBox | RadioButton | ToggleMenu | RadioMenu;


State returns interaction::State:
	AbortingState | TerminalState | StandardState_Impl | InitState;


Instrument returns instrument::Instrument:
	{instrument::Instrument}
	(initiallyActivated?='initiallyActivated')?
	'Instrument' name=EString
	'{'
		('description' description=EString)?
		('author' author=EString)?
		('version' version=EString)?
		('dateCreation' dateCreation=EString)?
		('interimFeedback' interimFeedback=EString)?
		('subscribedWidgets' '(' subscribedWidgets+=[widget::Widget|EString] ( "," subscribedWidgets+=[widget::Widget|EString])* ')' )?
		('links' '{' links+=Link ( "," links+=Link)* '}' )?
		('clazz' clazz=EClass)?
		('helpers' '{' helpers+=EClassifier ( "," helpers+=EClassifier)* '}' )?
		('providedWidgets' '{' providedWidgets+=Widget ( "," providedWidgets+=Widget)* '}' )?
	'}';


Action returns action::Action:
	(undoable?='undoable')?
	(modifyInstrument?='modifyInstrument')?
	'Action' name=EString
	'{'
		('execute' execute=EString)?
		('canDo' canDo=EString)?
		('undo' undo=EString)?
		('redo' redo=EString)?
		('cancelledBy' '(' cancelledBy+=[action::Action|EString] ( "," cancelledBy+=[action::Action|EString])* ')' )?
		'clazz' clazz=EClass
		('dependencies' '{' dependencies+=ActionDependency ( "," dependencies+=ActionDependency)* '}' )?
	'}';
	
//ActionInstrument returns action::ActionInstrument:
//	undoable?='undoable'
//	(modifyInstrument?='modifyInstrument')?
//	'Action' name=EString
//	'{'
//		'instruments' instruments+=[instrument::Instrument|EString] ( "," instruments+=[instrument::Instrument|EString])*
//		('execute' execute=EString)?
//		('canDo' canDo=EString)?
//		('undo' undo=EString)?
//		('redo' redo=EString)?
//		('cancelledBy' '(' cancelledBy+=[action::Action|EString] ( "," cancelledBy+=[action::Action|EString])* ')' )?
//		'clazz' clazz=EClass
//		('dependencies' '{' dependencies+=ActionDependency ( "," dependencies+=ActionDependency)* '}' )?
//	'}'
//;

Event returns event::Event:
	'Event'
	'{'
		'clazz' clazz=EClass
	'}';


Link returns instrument::Link:
	executeOnUpdate?='executeOnUpdate'
	'Link' name=EString
	'{'
		('description' description=EString)?
		('interimFeedback' interimFeedback=EString)?
		('isConditionRespected' isConditionRespected=EString)?
		('updateAction' updateAction=EString)?
		('initialiseAction' initialiseAction=EString)?
		'interaction' interaction=[interaction::Interaction|EString]
		'action' action=[action::Action|EString]
		('clazz' clazz=EClass)?
	'}';


Interaction returns interaction::Interaction:
	activated?='activated'
	'Interaction' name=EString
	'{'
		('description' description=EString)?
		('author' author=EString)?
		('dateCreation' dateCreation=EString)?
		('version' version=EString)?
		('initState' initState=[interaction::InitState|EString])?
		('currentState' currentState=[interaction::State|EString])?
		('states' '{' states+=State (states+=State)* '}' )?
		'clazz' clazz=EClass
		('helpers' '{' helpers+=EClassifier ( "," helpers+=EClassifier)* '}' )?
	'}';

Transition returns interaction::Transition:
//	'Transition'
	name=EString '(' event=[event::Event|EString] ')' ':' inputState=[interaction::State|EString] '=>' outputState=[interaction::State|EString]
	('{'
		('description' description=EString)?
		('condition' condition=EString)?
		('actions' actions=EString)?
		('hid' hid=EInt)?
//		'inputState' inputState=[interaction::State|EString]
//		'outputState' outputState=[interaction::State|EString]
//		'event' event=[event::Event|EString]
	'}')?;

InitState returns interaction::InitState:
	{interaction::InitState}
	'InitState'
	name=EString
		('[' description=EString ']')?
		(outputTransitions+=Transition ( "," outputTransitions+=Transition)* )?
	;
	
AbortingState returns interaction::AbortingState:
	{interaction::AbortingState}
	'AbortingState'
	name=EString
		('[' description=EString ']')?
		(outputTransitions+=Transition ( "," outputTransitions+=Transition)* )?
	;


TerminalState returns interaction::TerminalState:
	{interaction::TerminalState}
	'TerminalState'
	name=EString
		('[' description=EString ']')?
		(outputTransitions+=Transition ( "," outputTransitions+=Transition)* )?
	;


StandardState_Impl returns interaction::StandardState:
	{interaction::StandardState}
	'StandardState'
	name=EString
		('[' description=EString ']')?
		(outputTransitions+=Transition ( "," outputTransitions+=Transition)* )?
	;


ActionDependency returns action::ActionDependency:
	'ActionDependency'
	name=EString
	'{'
		'srcAction' srcAction=[action::Action|EString]
		'tgtActions' '(' tgtActions+=[action::Action|EString] ( "," tgtActions+=[action::Action|EString])* ')' 
	'}';


Tree returns widget::Tree:
	{widget::Tree}
	'Tree'
	name=EString;

Slider returns widget::Slider:
	{widget::Slider}
	'Slider'
	name=EString;

ProgressBar returns widget::ProgressBar:
	{widget::ProgressBar}
	'ProgressBar'
	name=EString;

Table returns widget::Table:
	{widget::Table}
	'Table'
	name=EString;

Label returns widget::Label:
	{widget::Label}
	'Label'
	name=EString
	'{'
		('text' text=EString)?
	'}';

TextArea returns widget::TextArea:
	{widget::TextArea}
	'TextArea'
	name=EString
	'{'
		('text' text=EString)?
	'}';

TextField returns widget::TextField:
	{widget::TextField}
	'TextField'
	name=EString
	'{'
		('text' text=EString)?
	'}';

Spinner returns widget::Spinner:
	{widget::Spinner}
	'Spinner'
	name=EString
	'{'
		('text' text=EString)?
	'}';

MultiLineList returns widget::MultiLineList:
	{widget::MultiLineList}
	'MultiLineList'
	name=EString;

SingleLineList returns widget::SingleLineList:
	{widget::SingleLineList}
	'SingleLineList'
	name=EString;

Panel returns widget::Panel:
	{widget::Panel}
	'Panel'
	name=EString
	'{'
		('elements' '{' elements+=Widget ( "," elements+=Widget)* '}' )?
	'}';

Window_Impl returns widget::Window:
	{widget::Window}
	'Window'
	name=EString
	'{'
		('elements' '{' elements+=Widget ( "," elements+=Widget)* '}' )?
	'}';

DialogueBox returns widget::DialogueBox:
	{widget::DialogueBox}
	'DialogueBox'
	name=EString
	'{'
		('elements' '{' elements+=Widget ( "," elements+=Widget)* '}' )?
	'}';

SplitPane returns widget::SplitPane:
	{widget::SplitPane}
	'SplitPane'
	name=EString
	'{'
		('elements' '{' elements+=Widget ( "," elements+=Widget)* '}' )?
	'}';

TabbedPanel returns widget::TabbedPanel:
	{widget::TabbedPanel}
	'TabbedPanel'
	name=EString
	'{'
		('elements' '{' elements+=Widget ( "," elements+=Widget)* '}' )?
	'}';

Button_Impl returns widget::Button:
	{widget::Button}
	'Button'
	name=EString;

ToggleButton returns widget::ToggleButton:
	{widget::ToggleButton}
	'ToggleButton'
	name=EString;

Menu_Impl returns widget::Menu:
	{widget::Menu}
	'Menu'
	name=EString;

CheckBox returns widget::CheckBox:
	{widget::CheckBox}
	'CheckBox'
	name=EString;

RadioButton returns widget::RadioButton:
	{widget::RadioButton}
	'RadioButton'
	name=EString;

ToggleMenu returns widget::ToggleMenu:
	{widget::ToggleMenu}
	'ToggleMenu'
	name=EString;

RadioMenu returns widget::RadioMenu:
	{widget::RadioMenu}
	'RadioMenu'
	name=EString;

/**********************************************************
 *                         Ecore                          *
 **********************************************************/

EClassifier returns ecore::EClassifier:
	EClass | EDataType_Impl | EEnum;

EStructuralFeature returns ecore::EStructuralFeature:
	EAttribute | EReference;

EClass returns ecore::EClass:
	{ecore::EClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'EClass'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';

ETypeParameter returns ecore::ETypeParameter:
	{ecore::ETypeParameter}
	'ETypeParameter'
	name=EString
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
	'}';

EOperation returns ecore::EOperation:
	{ecore::EOperation}
	'EOperation'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
	'}';

EGenericType returns ecore::EGenericType:
	{ecore::EGenericType}
	'EGenericType'
	'{'
		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		('eUpperBound' eUpperBound=EGenericType)?
		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		('eLowerBound' eLowerBound=EGenericType)?
	'}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

EParameter returns ecore::EParameter:
	{ecore::EParameter}
	'EParameter'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EAttribute returns ecore::EAttribute:
	{ecore::EAttribute}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'EAttribute'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EReference returns ecore::EReference:
	{ecore::EReference}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(containment?='containment')?
	'EReference'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('resolveProxies' resolveProxies=EBoolean)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eOpposite' eOpposite=[ecore::EReference|EString])?
		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	'}';

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
	'}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';